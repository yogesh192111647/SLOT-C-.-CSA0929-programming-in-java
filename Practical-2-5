public abstract class AbstractClass {

    public abstract int total(int[] numbers);

    public abstract double average(int[] numbers);

    public int mean(int[] numbers) {
        int sum = total(numbers);
        return sum / numbers.length;
    }

    public int mode(int[] numbers) {
        int[] frequency = new int[numbers.length];
        int maxFrequency = 0;
        int mode = 0;

        for (int i = 0; i < numbers.length; i++) {
            frequency[i] = 0;
            for (int j = 0; j < numbers.length; j++) {
                if (numbers[i] == numbers[j]) {
                    frequency[i]++;
                }
            }
            if (frequency[i] > maxFrequency) {
                maxFrequency = frequency[i];
                mode = numbers[i];
            }
        }

        return mode;
    }

    public int median(int[] numbers) {
        int[] sortedNumbers = numbers.clone();
        Arrays.sort(sortedNumbers);

        if (sortedNumbers.length % 2 == 0) {
            return (sortedNumbers[sortedNumbers.length / 2] + sortedNumbers[sortedNumbers.length / 2 - 1]) / 2;
        } else {
            return sortedNumbers[sortedNumbers.length / 2];
        }
    }
}

class ConcreteClass extends AbstractClass {

    @Override
    public int total(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }

    @Override
    public double average(int[] numbers) {
        return (double) total(numbers) / numbers.length;
    }

    public static void main(String[] args) {
        int
